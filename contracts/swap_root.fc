#include "./imports/stdlib.fc";
#include "./swap_utils.fc";
#include "./messages.fc";


() load_data() inline {
    slice ds = get_data().begin_parse();
    slice admin_address = ds~load_msg_addr();
    slice co_admin_address = ds~load_msg_addr();
    int fee = ds~load_uint(32);
    cell swap_wallet_code = ds~load_ref();

    return (
        admin_address,
        co_admin_address,
        fee,
        swap_wallet_code
    );
}


() save_data(
    slice admin_address, 
    slice co_admin_address, 
    int fee, 
    cell swap_wallet_code
) impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_slice(co_admin_address)
            .store_uint(fee, 32)
            .store_ref(swap_wallet_code)   
        .end_cell()
    );

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flag = cs~load_uint(64);
    slice msg_sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    if(op == op::retrieve_fee) {
        var (
            slice admin_address, 
            slice co_admin_address, 
            int fee, 
            cell swap_wallet_code
        ) = load_data();

        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(200, equal_slices(calculate_user_swap_wallet_address(from_address,my_address(),swap_wallet_code), msg_sender))
        var msg_body = begin_cell()
            .store_uint(op::retrieved_fee, 32)
            .store_uint(fee, 32)
            .store_slice(in_msg_body)
        .end_cell();

        send_simple_message(0,msg_sender,msg_body,CARRY_REMAINING_GAS);
    }
}