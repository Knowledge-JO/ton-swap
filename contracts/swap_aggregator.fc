#include "imports/stdlib.fc";
#include "./op-codes.fc";
#include "./messages.fc";
#include "./swap_utils.fc";
;;
;; Common
;;

const int msg_flag::bounceable = 0x18;

builder store_zeros(builder b, int n) asm "STZEROES";

slice addr_none() asm "b{00} PUSHSLICE";

;;
;; DEX
;;

const int MIN_BALANCE = 100000000; ;; 0.1 TON
const int MIN_TRADE_AMOUNT = 1000000000; ;; 1 TON
const int TRADE_FEE = 200000000; ;; 0.2 TON
const int FWD_AMOUNT = 250000000; ;; 0.25 TON
const int MIN_VALUE = 300000000; ;;0.3
const int ton_vault::swap = 0xea06185d;


(int, cell, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    slice owner_address = ds~load_msg_addr();
    int noReferredUsers = ds~load_uint(32);
    cell referrer_data = ds~load_ref();
    slice root_addr = ds~load_msg_addr();
    cell swap_wallet_code = ds~load_ref();

    return (
        owner_address,
        noReferredUsers,
        referrer_data,
        root_addr,
        swap_wallet_code
    );
}


() save_data(
    slice owner_address,
    int noReferredUsers, 
    cell referrer_data, 
    slice root_addr, 
    cell swap_wallet_code
) impure inline {

}





() ton_to_jetton(int my_balance, slice in_msg_body, int msg_value) impure {
    var (
        slice owner_address,
        int noReferredUsers, 
        cell referrer_data, 
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();
    int fixed_fee = in_msg_body~load_uint(32);
    slice swap_data = in_msg_body~load_ref().begin_parse();

    throw_unless(100, msg_value > TRADE_FEE + MIN_TRADE_AMOUNT);

    slice receipient_addr = swap_data~load_msg_addr();
    slice pool_addr = swap_data~load_msg_addr();
    slice ton_vault_addr = swap_data~load_msg_addr();
    slice referral_addr = swap_data~load_ref().begin_parse();
    slice ref_data = referrer_data.begin_parse();
  
    int fee = msg_value * 1 / 100;
    int trade_fee = fee > fixed_fee ? fee : fixed_fee;

    int referral_reward = trade_fee * 18 / 100; 
    int trade_value = msg_value - trade_fee;

    if(referral_addr.slice_empty?() == 0 & ref_data.slice_empty?()){
        slice addr = referral_addr~load_msg_addr();
        referrer_data.end_parse();
        referrer_data = begin_cell().store_slice(addr).end_cell();
        var msg_body = begin_cell()
                .store_uint(op::update_referral, 32)
                .store_slice(addr)
                .store_slice(owner_address)
            .end_cell();
        send_simple_message(referral_reward,calculate_user_swap_wallet_address(addr,root_addr,swap_wallet_code),msg_body,PAID_EXTERNALLY)
        send_empty_message(trade_fee - referral_reward,root_addr,PAID_EXTERNALLY);
    }

    if(ref_data.slice_empty?() == 0){
        slice referrer_address = ref_data~load_msg_addr();
        referrer_data.end_parse();

        send_empty_message(referral_reward,calculate_user_swap_wallet_address(addr,root_addr,swap_wallet_code),PAID_EXTERNALLY);
    }

    send_empty_message(trade_fee,root_addr,PAID_EXTERNALLY);

    cell msg_body = begin_cell()
        .store_uint(ton_vault::swap, 32)
        .store_uint(0, 64) ;; query_id:int64
        .store_coins(trade_value) ;; amount:Coins # subtract gas
        ;; _:SwapStep
        .store_slice(pool_addr) ;; pool_addr:MsgAddressInt
        .store_uint(0, 1) ;; kind:SwapKind
        .store_coins(0) ;; limit:Coins
        .store_maybe_ref(null()) ;; next:(Maybe ^SwapStep)
        ;; swap_params:^SwapParams
        .store_ref(
            begin_cell()
                .store_uint(now() + 60 * 5, 32) ;; deadline:Timestamp # 5 min
                .store_slice(receipient_addr) ;; recipient_addr:MsgAddressInt
                .store_slice(addr_none()) ;; referral_addr:MsgAddress
                .store_maybe_ref(null()) ;; fulfill_payload:(Maybe ^Cell)
                .store_maybe_ref(null()) ;; reject_payload:(Maybe ^Cell)
                .end_cell()
        )
        .end_cell();

    send_raw_message(
        begin_cell()
            .store_uint(msg_flag::bounceable, 6)
            .store_slice(ton_vault_addr)
            .store_coins(trade_value)
            .store_zeros(1 + 4 + 4 + 64 + 32 + 1)
            .store_maybe_ref(msg_body)
            .end_cell(),
        0
    );
}


() jetton_to_jetton(int my_balance, slice in_msg_body, slice msg_sender, int msg_value) impure {
    int query_id = in_msg_body~load_uint(64); ;; query_id
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    cell forward_payload = in_msg_body~load_ref();
    cell swap_payload = forward_payload~load_ref();
    slice aggregator_jetton_addr = forward_payload~load_msg_addr();
    slice jetton_vault = forward_payload~load_msg_addr();
    slice referral_address = forward_payload~load_msg_addr();
    throw_unless(101, equal_slices(msg_sender, aggregator_jetton_addr));

    var msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(0, 64) ;; query_id
        .store_coins(jetton_amount)
        .store_slice(jetton_vault) ;; destination
        .store_slice(from_address) ;; response address
        .store_maybe_ref(begin_cell().end_cell())
        .store_coins(FWD_AMOUNT) ;; 0.25
        .store_maybe_ref(swap_payload)
    .end_cell();

    send_simple_message(MIN_VALUE,aggregator_jetton_addr,msg_body,PAID_EXTERNALLY);
}


() withdraw_excess_tokens(int my_balance, slice in_msg_body, slice msg_sender) impure {
    ( slice admin_address ) = load_data();

    int withdrawal_amount = in_msg_body~load_coins();

    throw_unless(505, equal_slices(msg_sender, admin_address));
    throw_unless(506, my_balance > withdrawal_amount);

    int allowed_amount = min(withdrawal_amount, my_balance - min_tons_for_storage);

    send_empty_message(allowed_amount, admin_address, PAID_EXTERNALLY);
}


() retrieve_fee(int my_balance, slice in_msg_body, int msg_value) impure {

    var (
        slice owner_address,
        int noReferredUsers, 
        cell referrer_data, 
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();
    
    var msg_body = begin_cell()
        .store_uint(op::retrieve_fee, 32)
        .store_slice(owner_address)
        .store_slice(in_msg_body)
    .end_cell();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()){
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; NOTE: Ignore bounced messages.
        return ();
    }
    slice msg_sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    var (
        slice owner_address,
        int noReferredUsers, 
        cell referrer_data, 
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();


    ;; if(op == op::swap_ton_to_jetton){
    ;;     ton_to_jetton(my_balance,in_msg_body,msg_value);
    ;; }

    ;; jettons to jetton 
    ;; jettons to ton
    if(op == op::transfer_notification) {
        ;; swap jetton to either ton or jetton
        jetton_to_jetton_or_ton(my_balance,in_msg_body, msg_sender, msg_value);
    }

    if(op == op::make_swap_ton){
        retrieve_fee(my_balance,in_msg_body, msg_sender, msg_value); ;; get swap fee first
    }

    if(op == op::retrieved_fee) {
        throw_unless(105, equal_slices(msg_sender, root_addr));
        ton_to_jetton(my_balance,in_msg_body,msg_value);
    }

    if(op == op::update_referral) {
        var (
            slice owner_address,
            int noReferredUsers, 
            cell referrer_data, 
            slice root_addr, 
            cell swap_wallet_code
        ) = load_data();
        slice from_addr = in_msg_body~load_msg_addr();
        slice referrer = in_msg_body~load_msg_addr();
        throw_unless(106, equal_slices(calculate_user_swap_wallet_address(from_addr,root_addr,swap_wallet_code), msg_sender));
        throw_unless(107, equal_slices(referrer, owner_address));
        noReferredUsers += 1;
        save_data(owner_address,noReferredUsers,referrer_data,root_addr,swap_wallet_code);
    }

}