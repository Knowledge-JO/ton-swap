#include "./imports/stdlib.fc";
#include "./swap_utils.fc";
#include "./messages.fc";
#include "./op-codes.fc";

const int min_tons_for_storage = 10000000; ;; 0.01 ton

(slice, slice, int, int, int, int, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    slice admin_address = ds~load_msg_addr();
    slice co_admin_address = ds~load_msg_addr();
    int fee = ds~load_coins();
    int gas_fee = ds~load_coins();
    int fwd_amount = ds~load_coins();
    int min_value = ds~load_coins();
    cell swap_wallet_code = ds~load_ref();

    return (
        admin_address,
        co_admin_address,
        fee,
        gas_fee,
        fwd_amount,
        min_value,
        swap_wallet_code
    );
}


() save_data(
    slice admin_address, 
    slice co_admin_address, 
    int fee, 
    int gas_fee,
    int fwd_amount,
    int min_value,
    cell swap_wallet_code
) impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_slice(co_admin_address)
            .store_coins(fee)
            .store_coins(gas_fee)
            .store_coins(fwd_amount)
            .store_coins(min_value)
            .store_ref(swap_wallet_code)   
        .end_cell()
    );

}


() init_swap_wallet(slice msg_sender) impure {
    var (
        slice admin_address, 
        slice co_admin_address, 
        int fee, 
        int gas_fee,
        int fwd_amount,
        int min_value,
        cell swap_wallet_code
    ) = load_data();
    cell state_init = calculate_swap_wallet_state_init(msg_sender,my_address(),swap_wallet_code);
    slice swap_wallet_addr = calculate_swap_wallet_address(state_init);
    var msg_body = begin_cell().end_cell();
    send_message_with_stateinit(0,swap_wallet_addr,state_init,msg_body,CARRY_REMAINING_GAS);
}

() update_fees(slice in_msg_body, slice msg_sender) impure {
    (
        slice admin_address, 
        slice co_admin_address, 
        int fee, 
        int gas_fee,
        int fwd_amount,
        int min_value,
        cell swap_wallet_code
    ) = load_data();

    throw_unless(190, equal_slices(msg_sender,admin_address) | equal_slices(msg_sender,co_admin_address));
    fee = in_msg_body~load_coins();
    gas_fee = in_msg_body~load_coins();
    fwd_amount = in_msg_body~load_coins();
    min_value = in_msg_body~load_coins();
    save_data(admin_address,co_admin_address,fee,gas_fee,fwd_amount,min_value,swap_wallet_code);
}

() change_admin(slice in_msg_body, slice msg_sender) impure {
    (
        slice admin_address, 
        slice co_admin_address, 
        int fee, 
        int gas_fee,
        int fwd_amount,
        int min_value,
        cell swap_wallet_code
    ) = load_data();

    throw_unless(191, equal_slices(msg_sender,admin_address) | equal_slices(msg_sender,co_admin_address));
    admin_address = in_msg_body~load_msg_addr();
    save_data(admin_address,co_admin_address,fee,gas_fee,fwd_amount,min_value,swap_wallet_code);
}

() change_co_admin(slice in_msg_body, slice msg_sender) impure {
    (
        slice admin_address, 
        slice co_admin_address, 
        int fee, 
        int gas_fee,
        int fwd_amount,
        int min_value,
        cell swap_wallet_code
    ) = load_data();
    throw_unless(192, equal_slices(msg_sender,admin_address) | equal_slices(msg_sender,co_admin_address));
    co_admin_address = in_msg_body~load_msg_addr();
    save_data(admin_address,co_admin_address,fee,gas_fee,fwd_amount,min_value,swap_wallet_code);
}

() withdraw_excess_tokens(int my_balance, slice in_msg_body, slice msg_sender) impure {
    (
        slice admin_address, 
        slice co_admin_address, 
        int fee, 
        int gas_fee,
        int fwd_amount,
        int min_value,
        cell swap_wallet_code
    ) = load_data();

    int withdrawal_amount = in_msg_body~load_coins();

    throw_unless(505, equal_slices(msg_sender, admin_address));
    throw_unless(506, my_balance > withdrawal_amount);

    int allowed_amount = min(withdrawal_amount, my_balance - min_tons_for_storage);

    send_empty_message(allowed_amount, admin_address, PAID_EXTERNALLY);
}

 
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; NOTE: Ignore bounced messages.
        return ();
    }
    slice msg_sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    if(op == op::initialize_swap_wallet){
        init_swap_wallet(msg_sender);
    }

    if(op == op::update_fees){
        update_fees(in_msg_body,msg_sender);
    }

    if(op == op::change_admin){
        change_admin(in_msg_body,msg_sender);
    }

    if(op == op::change_co_admin){
        change_co_admin(in_msg_body,msg_sender);
    }

    if(op == op::retrieve_fee) {
        (
            slice admin_address, 
            slice co_admin_address, 
            int fee, 
            int gas_fee,
            int fwd_amount,
            int min_value,
            cell swap_wallet_code
        ) = load_data();

        slice from_address = in_msg_body~load_msg_addr();
        int operation = in_msg_body~load_uint(32);
        throw_unless(202, equal_slices(calculate_user_swap_wallet_address(from_address,my_address(),swap_wallet_code), msg_sender));
        var msg_body = begin_cell()
            .store_uint(op::retrieved_fee, 32)
            .store_uint(operation, 32)
            .store_coins(fee)
            .store_coins(gas_fee)
            .store_coins(fwd_amount)
            .store_coins(min_value)
            .store_slice(in_msg_body)
        .end_cell();

        send_simple_message(0,msg_sender,msg_body,CARRY_REMAINING_GAS);
    }

    if(op == op::withdraw_ton) {
        withdraw_excess_tokens(my_balance,in_msg_body,msg_sender);
    }

}

slice get_user_swap_aggregator_address(slice owner_address) method_id {
    (
        slice admin_address, 
        slice co_admin_address, 
        int fee, 
        int gas_fee,
        int fwd_amount,
        int min_value,
        cell swap_wallet_code
    ) = load_data();
    return calculate_user_swap_wallet_address(owner_address,my_address(),swap_wallet_code);
}
 
(slice, slice, int, int, int, int, cell) get_root_data() method_id {
    return load_data();
}
